{"version":3,"sources":["logic/generator.ts","components/AnswerInput.tsx","components/EquationDisplay.tsx","components/Hud.tsx","App.tsx","index.tsx"],"names":["randomNumber","min","max","Math","round","random","randomOperator","operators","floor","length","generateEquation","count","start","toString","i","push","math","join","AnswerInput","_ref","submitAnswerCallback","_useState","useState","_useState2","Object","slicedToArray","answer","setAnswer","react","className","onSubmit","event","preventDefault","parseInt","autoComplete","type","name","value","required","autoFocus","onChange","e","target","EquationDisplay","equation","style","fontSize","Hud","previousCorrect","previousSolution","score","previousSolutionColor","Row","Col","visibility","undefined","color","getMinFromScore","ceil","getMaxFromScore","getCountFromScore","getOperatorsFromScore","App","setScore","_useState3","_useState4","setEquation","_useState5","_useState6","setPreviousSolution","_useState7","_useState8","setPreviousCorrect","Container","components_EquationDisplay","components_Hud","components_AnswerInput","solution","evaluate","callback","nextEquation","ReactDOM","render","react_default","a","createElement","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ce8dfb91.chunk.js","sourcesContent":["import * as math from 'mathjs';\n\nexport const randomNumber = (min: number, max: number) => Math.round(Math.random() * (max - min)) + min;\n\nexport const randomOperator = (operators: string[]) => operators[Math.floor(Math.random() * operators.length)];\n\nconst generateEquation = (\n  operators: string[],\n  count: number,\n  min: number,\n  max: number,\n): math.MathNode => {\n  const start: string[] = [randomNumber(min, max).toString()];\n\n  for (let i = 1; i < count; i += 1) {\n    start.push(randomOperator(operators), randomNumber(min, max).toString());\n  }\n\n  return math.parse(start.join(' '));\n};\n\nexport default generateEquation;\n","import * as React from 'react';\nimport { useState } from 'react';\n\ninterface InputProps {\n  submitAnswerCallback: (answer: number) => void;\n}\n\nfunction AnswerInput({ submitAnswerCallback }: InputProps) {\n  const [answer, setAnswer] = useState('');\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    submitAnswerCallback(parseInt(answer, 10));\n    setAnswer('');\n  };\n\n  return (\n    <form className=\"d-flex justify-content-around\" onSubmit={handleSubmit}>\n      <input\n        autoComplete=\"off\"\n        type=\"number\"\n        className=\"form-control\"\n        name=\"answer\"\n        value={answer}\n        required\n        autoFocus\n        onChange={(e) => setAnswer(e.target.value)}\n      />\n      <button type=\"submit\" className=\"btn btn-primary\">\n        âž¤\n      </button>\n    </form>\n  );\n}\n\nexport default AnswerInput;\n","import * as React from 'react';\n\ninterface EquationInputs {\n  equation: string;\n}\n\nfunction EquationDisplay({ equation }: EquationInputs) {\n  return (\n    <div className=\"text-center\">\n      <span style={{ fontSize: '10em' }} className=\"equation-display\">\n        {equation}\n      </span>\n    </div>\n  );\n}\n\nexport default EquationDisplay;\n","import * as React from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\ninterface InputProps {\n  previousSolution: number;\n  previousCorrect: boolean | undefined;\n  score: number;\n}\n\nfunction Hud({ previousCorrect, previousSolution, score }: InputProps) {\n  const previousSolutionColor = previousCorrect ? 'green' : 'red';\n\n  return (\n    <Row>\n      <Col>\n        Score:&nbsp;\n        {score}\n      </Col>\n      <Col\n        style={{\n          visibility: previousCorrect === undefined ? 'hidden' : 'visible',\n        }}\n      >\n        Previous:&nbsp;\n        <span className=\"fw-bold\" style={{ color: previousSolutionColor }}>\n          {previousSolution || ''}\n        </span>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Hud;\n","import * as React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport generateEquation from './logic/generator';\nimport AnswerInput from './components/AnswerInput';\nimport EquationDisplay from './components/EquationDisplay';\nimport Hud from './components/Hud';\n\nconst getMinFromScore = (score: number) => Math.ceil(score / 20);\nconst getMaxFromScore = (score: number) => Math.ceil(score / 2) + 1;\nconst getCountFromScore = (score: number) => (Math.ceil(score / 50) || 1) + 1;\nconst getOperatorsFromScore = (score: number): string[] => {\n  const operators = ['+'];\n\n  if (score > 10) {\n    operators.push('-');\n  }\n\n  if (score > 30) {\n    operators.push('*');\n  }\n\n  return operators;\n};\n\nfunction nextEquation(\n  score: number,\n  callback: (equation: math.MathNode) => void,\n) {\n  const count = getCountFromScore(score);\n  const min = getMinFromScore(score);\n  const max = getMaxFromScore(score);\n  const operators = getOperatorsFromScore(score);\n\n  callback(generateEquation(operators, count, min, max));\n}\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [equation, setEquation] = useState(generateEquation(['+'], 2, 1, 1));\n  const [previousSolution, setPreviousSolution] = useState(0);\n  const [previousCorrect, setPreviousCorrect] = useState(\n    (): boolean | undefined => undefined,\n  );\n\n  const validateAnswer = (answer: number) => {\n    const solution = equation.evaluate();\n\n    setPreviousSolution(solution);\n\n    if (solution === answer) {\n      setScore(score + 1);\n      setPreviousCorrect(true);\n    } else {\n      setScore(score - 1);\n      setPreviousCorrect(false);\n    }\n\n    nextEquation(score, setEquation);\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <EquationDisplay equation={equation.toString()} />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Hud\n            score={score}\n            previousCorrect={previousCorrect}\n            previousSolution={previousSolution}\n          />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <AnswerInput submitAnswerCallback={validateAnswer} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}