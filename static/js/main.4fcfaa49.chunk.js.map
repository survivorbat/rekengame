{"version":3,"sources":["logic/generator.ts","components/AnswerInput.tsx","components/EquationDisplay.tsx","components/Hud.tsx","App.tsx","index.tsx"],"names":["randomNumber","min","max","Math","round","random","randomOperator","operators","floor","length","generateEquation","count","start","toString","i","push","math","join","AnswerInput","_ref","submitAnswerCallback","_useState","useState","_useState2","Object","slicedToArray","answer","setAnswer","react","onSubmit","event","preventDefault","parseInt","className","type","name","value","required","onChange","e","target","EquationDisplay","equation","Hud","previousCorrect","previousSolution","score","previousSolutionClass","style","visibility","undefined","concat","getMinFromScore","ceil","getMaxFromScore","getCountFromScore","getOperatorsFromScore","App","setScore","_useState3","_useState4","setEquation","_useState5","_useState6","setPreviousSolution","_useState7","_useState8","setPreviousCorrect","components_EquationDisplay","components_Hud","components_AnswerInput","solution","evaluate","callback","nextEquation","ReactDOM","render","react_default","a","createElement","StrictMode","src_App","document","getElementById"],"mappings":"+SAEaA,EAAe,SAACC,EAAaC,GAAd,OAA8BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,GAEvFK,EAAiB,SAACC,GAAD,OAAyBA,EAAUJ,KAAKK,MAAML,KAAKE,SAAWE,EAAUE,UAYvFC,EAVU,SAACH,EAAqBI,EAAeV,EAAaC,GAGzE,IAFA,IAAMU,EAAkB,CAACZ,EAAaC,EAAKC,GAAKW,YAEvCC,EAAI,EAAGA,EAAIH,EAAOG,GAAK,EAC9BF,EAAMG,KAAKT,EAAeC,GAAYP,EAAaC,EAAKC,GAAKW,YAG/D,OAAOG,IAAWJ,EAAMK,KAAK,aCYhBC,MAjBf,SAAAC,GAA2D,IAApCC,EAAoCD,EAApCC,qBAAoCC,EAC7BC,mBAAS,IADoBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClDK,EADkDH,EAAA,GAC1CI,EAD0CJ,EAAA,GASzD,OACEK,EAAA,sBAAMC,SAPa,SAACC,GACpBA,EAAMC,iBACNX,EAAqBY,SAASN,EAAQ,KACtCC,EAAU,KAIoBM,UAAU,oBACtCL,EAAA,uBAAOM,KAAK,SAASD,UAAU,eAAeE,KAAK,SAASC,MAAOV,EAAQW,UAAQ,EAACC,SAAU,SAACC,GAAD,OAAOZ,EAAUY,EAAEC,OAAOJ,UACxHR,EAAA,wBAAQM,KAAK,SAASD,UAAU,iBAAhC,kBCLSQ,MARf,SAAAtB,GAAuD,IAA5BuB,EAA4BvB,EAA5BuB,SACzB,OACEd,EAAA,qBAAKK,UAAU,sBACbL,EAAA,sBAAMK,UAAU,oBAAoBS,KCe3BC,MAjBf,SAAAxB,GAAuE,IAAxDyB,EAAwDzB,EAAxDyB,gBAAiBC,EAAuC1B,EAAvC0B,iBAAkBC,EAAqB3B,EAArB2B,MAC1CC,EAAwBH,EAAkB,UAAY,YAE5D,OACEhB,EAAA,qBAAKK,UAAU,iBACbL,EAAA,sBAAMK,UAAU,mBAAhB,aAEGa,GAEHlB,EAAA,sBAAMoB,MAAO,CAAEC,gBAAgCC,IAApBN,EAAgC,SAAW,WAAaX,UAAU,sBAA7F,gBAEEL,EAAA,sBAAMK,UAAS,oBAAAkB,OAAsBJ,IAA0BF,GAAoB,OCXrFO,EAAkB,SAACN,GAAD,OAAmB3C,KAAKkD,KAAKP,EAAQ,KACvDQ,EAAkB,SAACR,GAAD,OAAoB3C,KAAKkD,KAAKP,EAAQ,GAAK,GAC7DS,EAAoB,SAACT,GAAD,OAAoB3C,KAAKkD,KAAKP,EAAQ,KAAO,GAAK,GACtEU,EAAwB,SAACV,GAC7B,IAAMvC,EAAY,CAAC,KAUnB,OARIuC,EAAQ,IACVvC,EAAUQ,KAAK,KAGb+B,EAAQ,IACVvC,EAAUQ,KAAK,KAGVR,GA6CMkD,MAjCf,WAAe,IAAApC,EACaC,mBAAS,GADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNyB,EADMvB,EAAA,GACCmC,EADDnC,EAAA,GAAAoC,EAEmBrC,mBAASZ,EAAiB,CAAC,KAAM,EAAG,EAAG,IAF1DkD,EAAApC,OAAAC,EAAA,EAAAD,CAAAmC,EAAA,GAENjB,EAFMkB,EAAA,GAEIC,EAFJD,EAAA,GAAAE,EAGmCxC,mBAAS,GAH5CyC,EAAAvC,OAAAC,EAAA,EAAAD,CAAAsC,EAAA,GAGNjB,EAHMkB,EAAA,GAGYC,EAHZD,EAAA,GAAAE,EAIiC3C,mBAAS,cAJ1C4C,EAAA1C,OAAAC,EAAA,EAAAD,CAAAyC,EAAA,GAINrB,EAJMsB,EAAA,GAIWC,EAJXD,EAAA,GAsBb,OACEtC,EAAA,qBAAKK,UAAU,aACbL,EAAA,cAACwC,EAAD,CAAiB1B,SAAUA,EAAS7B,aACpCe,EAAA,yBACEA,EAAA,cAACyC,EAAD,CAAKvB,MAAOA,EAAOF,gBAAiBA,EAAiBC,iBAAkBA,IACvEjB,EAAA,cAAC0C,EAAD,CAAalD,qBArBI,SAACM,GACtB,IAAM6C,EAAW7B,EAAS8B,WAE1BR,EAAoBO,GAEhBA,IAAa7C,GACfgC,EAASZ,EAAQ,GACjBqB,GAAmB,KAEnBT,EAASZ,EAAQ,GACjBqB,GAAmB,IAzBzB,SAAsBrB,EAAe2B,GACnC,IAAM9D,EAAQ4C,EAAkBT,GAC1B7C,EAAMmD,EAAgBN,GACtB5C,EAAMoD,EAAgBR,GACtBvC,EAAYiD,EAAsBV,GAExC2B,EAAS/D,EAAiBH,EAAWI,EAAOV,EAAKC,IAsB/CwE,CAAa5B,EAAOe,eC/CxBc,IAASC,OACPC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,WAAP,KACEH,EAAAC,EAAAC,cAACE,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.4fcfaa49.chunk.js","sourcesContent":["import * as math from 'mathjs';\n\nexport const randomNumber = (min: number, max: number) => Math.round(Math.random() * (max - min)) + min;\n\nexport const randomOperator = (operators: string[]) => operators[Math.floor(Math.random() * operators.length)];\n\nconst generateEquation = (operators: string[], count: number, min: number, max: number): math.MathNode => {\n  const start: string[] = [randomNumber(min, max).toString()];\n\n  for (let i = 1; i < count; i += 1) {\n    start.push(randomOperator(operators), randomNumber(min, max).toString());\n  }\n\n  return math.parse(start.join(' '));\n};\n\nexport default generateEquation;\n","import * as React from 'react';\nimport { useState } from 'react';\nimport './AnswerInput.css';\n\ninterface InputProps {\n  submitAnswerCallback: (answer: number) => void\n}\n\nfunction AnswerInput({ submitAnswerCallback }: InputProps) {\n  const [answer, setAnswer] = useState('');\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    submitAnswerCallback(parseInt(answer, 10));\n    setAnswer('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"answer-container\">\n      <input type=\"number\" className=\"answer-input\" name=\"answer\" value={answer} required onChange={(e) => setAnswer(e.target.value)} />\n      <button type=\"submit\" className=\"answer-button\">âž¤</button>\n    </form>\n  );\n}\n\nexport default AnswerInput;\n","import * as React from 'react';\nimport './EquationDisplay.css';\n\ninterface EquationInputs {\n  equation: string;\n}\n\nfunction EquationDisplay({ equation }: EquationInputs) {\n  return (\n    <div className=\"equation-container\">\n      <span className=\"equation-display\">{equation}</span>\n    </div>\n  );\n}\n\nexport default EquationDisplay;\n","import * as React from 'react';\n\ninterface InputProps {\n  previousSolution: number;\n  previousCorrect: boolean | undefined;\n  score: number;\n}\n\nfunction Hud({ previousCorrect, previousSolution, score }: InputProps) {\n  const previousSolutionClass = previousCorrect ? 'correct' : 'incorrect';\n\n  return (\n    <div className=\"hud-container\">\n      <span className=\"score-container\">\n        Score:&nbsp;\n        {score}\n      </span>\n      <span style={{ visibility: previousCorrect === undefined ? 'hidden' : 'visible' }} className=\"previous-container\">\n        Previous:&nbsp;\n        <span className={`previous-display ${previousSolutionClass}`}>{previousSolution || ''}</span>\n      </span>\n    </div>\n  );\n}\n\nexport default Hud;\n","import * as React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport generateEquation from './logic/generator';\nimport AnswerInput from './components/AnswerInput';\nimport EquationDisplay from './components/EquationDisplay';\nimport Hud from './components/Hud';\n\nconst getMinFromScore = (score: number) => Math.ceil(score / 20);\nconst getMaxFromScore = (score : number) => Math.ceil(score / 2) + 1;\nconst getCountFromScore = (score: number) => (Math.ceil(score / 50) || 1) + 1;\nconst getOperatorsFromScore = (score: number): string[] => {\n  const operators = ['+'];\n\n  if (score > 10) {\n    operators.push('-');\n  }\n\n  if (score > 30) {\n    operators.push('*');\n  }\n\n  return operators;\n};\n\nfunction nextEquation(score: number, callback: (equation: math.MathNode) => void) {\n  const count = getCountFromScore(score);\n  const min = getMinFromScore(score);\n  const max = getMaxFromScore(score);\n  const operators = getOperatorsFromScore(score);\n\n  callback(generateEquation(operators, count, min, max));\n}\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [equation, setEquation] = useState(generateEquation(['+'], 2, 1, 1));\n  const [previousSolution, setPreviousSolution] = useState(0);\n  const [previousCorrect, setPreviousCorrect] = useState((): boolean | undefined => undefined);\n\n  const validateAnswer = (answer: number) => {\n    const solution = equation.evaluate();\n\n    setPreviousSolution(solution);\n\n    if (solution === answer) {\n      setScore(score + 1);\n      setPreviousCorrect(true);\n    } else {\n      setScore(score - 1);\n      setPreviousCorrect(false);\n    }\n\n    nextEquation(score, setEquation);\n  };\n\n  return (\n    <div className=\"container\">\n      <EquationDisplay equation={equation.toString()} />\n      <div>\n        <Hud score={score} previousCorrect={previousCorrect} previousSolution={previousSolution} />\n        <AnswerInput submitAnswerCallback={validateAnswer} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}